<%- include('partials/header') %>
<div class="container mx-auto mt-4">
    <a href="javascript:history.back()" class="bg-gray-500 text-white py-2 px-4 rounded mb-3 inline-block hover:bg-gray-700">Back</a>
    <h3 class="text-xl font-bold mb-4 text-staples-red">Manage User States for <%= userId %></h3>

    <table class="min-w-full bg-white border border-gray-200">
        <thead>
            <tr class="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
                <th class="py-3 px-6 text-left">Email</th>
                <th class="py-3 px-6 text-left">State</th>
                <th class="py-3 px-6 text-left">Action</th>
            </tr>
        </thead>
        <tbody class="text-gray-600 text-sm font-light">
            <tr class="border-b border-gray-200 hover:bg-gray-100">
                <td class="py-3 px-6 text-left"><%= user.email %></td>
                <td class="py-3 px-6 text-left">
                    <% if (user.blocked) { %>
                        Locked
                    <% } else if (!user.email_verified) { %>
                        Email Not Verified
                    <% } else { %>
                        Active
                    <% } %>
                </td>
                <td class="py-3 px-6 text-left">
                        <form action="/update-user-state" method="post">
                            <input type="hidden" name="userId" value="<%= user.user_id %>">
                            <select name="state" class="form-select bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded" required>
                                <option value="Active" <%= !user.blocked && user.email_verified ? 'selected' : '' %>>Active</option>
                                <option value="Locked" <%= user.blocked ? 'selected' : '' %>>Locked</option>
                                <option value="Email Not Verified" <%= !user.email_verified ? 'selected' : '' %>>Email Not Verified</option>
                            </select>
                            <button type="submit" class="bg-staples-red text-white py-2 px-4 rounded hover:bg-red-700 mt-2 sm:mt-0">Update</button>
                        </form>

                </td>
            </tr>
        </tbody>
    </table>
    <div class="mx-auto mt-4">
        <% if (hasPushMfa) { %>
            <button id="ciba-button" class="bg-staples-red text-white py-2 px-4 rounded hover:bg-red-700 mt-2 sm:mt-0">Verify user via BaakChannel </button>
            <div id="spinner" class="hidden spinner-border text-staples-red mt-4"></div>
            <div id="countdown" class="hidden text-gray-600 mt-2">Time remaining: <span id="time-remaining">300</span> seconds</div>
            <br>
            <div style="word-break:break-all; word-wrap: normal;">This action is to demo Client Initiated Back Channel Authentication. You can initiate an authentication with the end user using a push notification!</div>
        <% } else { %>
            <button id="enroll-mfa-button" class="bg-staples-red text-white py-2 px-4 rounded hover:bg-red-700 mt-2 sm:mt-0">Enroll User in Push Authentication!</button>
            <div style="word-break:break-all; word-wrap: normal;">This is for demo purposes only! - Click on the button to enroll user for MFA ( You will need the auth0 Guardian App to demo this). In real world use cases the user will already be enabled!</div>
        <% } %>
    </div>
</div>

<script>
    // Handle CIBA initiation with binding message validation
    document.getElementById('ciba-button').addEventListener('click', function () {
        const spinner = document.getElementById('spinner');
        const countdown = document.getElementById('countdown');
        const timeRemainingEl = document.getElementById('time-remaining');
        const bindingMessageEl = document.getElementById('binding-message');
        const confirmButton = document.getElementById('confirm-binding-button');
        let timeRemaining = 300;

        spinner.classList.remove('hidden');
        countdown.classList.remove('hidden');

        fetch('/start-ciba', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: '<%= userId %>' })
        })
        .then(response => response.json())
        .then(data => {
            if (data.auth_req_id && data.binding_message) {
                // Show binding message and require confirmation
                bindingMessageEl.textContent = `Binding Message: ${data.binding_message}`;
                bindingMessageEl.classList.remove('hidden');
                confirmButton.classList.remove('hidden');

                // Add event listener for binding message confirmation
                confirmButton.addEventListener('click', function () {
                    bindingMessageEl.classList.add('hidden');
                    confirmButton.classList.add('hidden');
                    startPolling(data.auth_req_id, data.interval, data.binding_message);
                });
            } else {
                throw new Error(data.error || 'Failed to start CIBA.');
            }
        })
        .catch(error => {
            console.error('Error initiating CIBA:', error);
            alert('Error: ' + (error.message || 'Failed to start CIBA.'));
            spinner.classList.add('hidden');
            countdown.classList.add('hidden');
        });

        function startPolling(auth_req_id, interval, binding_message) {
            const countdownInterval = setInterval(() => {
                timeRemaining -= 1;
                timeRemainingEl.textContent = timeRemaining;

                if (timeRemaining <= 0) {
                    clearInterval(countdownInterval);
                    alert('CIBA request timed out. Please try again.');
                    spinner.classList.add('hidden');
                    countdown.classList.add('hidden');
                }
            }, 1000);

            pollTokenEndpoint(auth_req_id, interval, countdownInterval, binding_message);
        }

        function pollTokenEndpoint(auth_req_id, interval, countdownInterval, binding_message) {
            const userId = '<%= userId %>';
            const intervalId = setInterval(() => {
                fetch('/poll-token', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ auth_req_id, userId, binding_message })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.access_token) {
                        clearInterval(intervalId);
                        clearInterval(countdownInterval);
                        alert('User successfully verified. Please proceed.');
                        window.location.reload();
                    } else if (data.error && data.error !== "authorization_pending") {
                        clearInterval(intervalId);
                        clearInterval(countdownInterval);
                        alert('CIBA flow failed: ' + data.error_description);
                        spinner.classList.add('hidden');
                        countdown.classList.add('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error polling token endpoint:', error);
                });
            }, interval * 1000);
        }
    });
</script>


<div class="mx-auto mt-4">
    <div id="binding-message" class="hidden text-gray-800 font-bold mt-4"></div>
    <button id="confirm-binding-button" class="hidden bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700 mt-2 sm:mt-0">Confirm Binding Message</button>
</div>

<%- include('partials/footer') %>
